// <auto-generated />
using System;
using CStat.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CStat.Migrations
{
    [DbContext(typeof(CStatContext))]
    partial class CStatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ronripp_DB2")
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CStat.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNum")
                        .IsRequired()
                        .HasColumnName("Account_Num")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BusinessId")
                        .HasColumnName("Business_id")
                        .HasColumnType("int");

                    b.Property<string>("ContractLink")
                        .HasColumnName("Contract_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Account","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.HasKey("Id");

                    b.ToTable("Address","ronripp_CStat");

                    b.HasComment("Address");
                });

            modelBuilder.Entity("CStat.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DetailNote")
                        .HasColumnName("Detail_Note")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("End_Time")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("EventId")
                        .HasColumnName("Event_id")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalId")
                        .HasColumnName("Medical_id")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationId")
                        .HasColumnName("Registration_id")
                        .HasColumnType("int");

                    b.Property<int>("RoleType")
                        .HasColumnName("Role_Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("Start_Time")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("TransactionId")
                        .HasColumnName("Transaction_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Attendance","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcctId")
                        .HasColumnName("Acct_id")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("ApiLink")
                        .HasColumnName("API_Link")
                        .HasColumnType("nchar(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255);

                    b.Property<string>("ContractLink")
                        .HasColumnName("Contract_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Fees")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("PocId")
                        .HasColumnName("POC_id")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusDetails")
                        .HasColumnName("Status_Details")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserLink")
                        .HasColumnName("User_Link")
                        .HasColumnType("nchar(255)")
                        .IsFixedLength(true)
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasColumnName("User_Name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PocId");

                    b.ToTable("Business","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Church", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Alternate1Id")
                        .HasColumnName("Alternate1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Alternate2Id")
                        .HasColumnName("Alternate2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Alternate3Id")
                        .HasColumnName("Alternate3_id")
                        .HasColumnType("int");

                    b.Property<int?>("Elder1Id")
                        .HasColumnName("Elder1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Elder2Id")
                        .HasColumnName("Elder2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Elder3Id")
                        .HasColumnName("Elder3_id")
                        .HasColumnType("int");

                    b.Property<int?>("Elder4Id")
                        .HasColumnName("Elder4_id")
                        .HasColumnType("int");

                    b.Property<int?>("Elder5Id")
                        .HasColumnName("Elder5_id")
                        .HasColumnType("int");

                    b.Property<int>("MembershipStatus")
                        .HasColumnName("Membership_Status")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SeniorMinisterId")
                        .HasColumnName("Senior_Minister_id")
                        .HasColumnType("int");

                    b.Property<string>("StatusDetails")
                        .HasColumnName("Status_Details")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Trustee1Id")
                        .HasColumnName("Trustee1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Trustee2Id")
                        .HasColumnName("Trustee2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Trustee3Id")
                        .HasColumnName("Trustee3_id")
                        .HasColumnType("int");

                    b.Property<int?>("YouthMinisterId")
                        .HasColumnName("Youth_Minister_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Alternate1Id");

                    b.HasIndex("Alternate2Id");

                    b.HasIndex("Alternate3Id");

                    b.HasIndex("Elder1Id");

                    b.HasIndex("Elder2Id");

                    b.HasIndex("Elder3Id");

                    b.HasIndex("Elder4Id");

                    b.HasIndex("Elder5Id");

                    b.HasIndex("SeniorMinisterId");

                    b.HasIndex("Trustee1Id");

                    b.HasIndex("Trustee2Id");

                    b.HasIndex("Trustee3Id");

                    b.HasIndex("YouthMinisterId");

                    b.ToTable("Church","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChurchId")
                        .HasColumnName("Church_id")
                        .HasColumnType("int");

                    b.Property<string>("ContractLink")
                        .HasColumnName("Contract_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("CostAdult")
                        .HasColumnName("Cost_Adult")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CostCabin")
                        .HasColumnName("Cost_Cabin")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CostChild")
                        .HasColumnName("Cost_Child")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CostFamily")
                        .HasColumnName("Cost_Family")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CostLodge")
                        .HasColumnName("Cost_Lodge")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CostTent")
                        .HasColumnName("Cost_Tent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("End_Time")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("Staff")
                        .HasColumnName("staff")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("Start_Time")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.ToTable("Event","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("DateReported")
                        .HasColumnName("Date_Reported")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Persion3Id")
                        .HasColumnName("Persion3_id")
                        .HasColumnType("int");

                    b.Property<int?>("Person1Id")
                        .HasColumnName("Person1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Person2Id")
                        .HasColumnName("Person2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Person4Id")
                        .HasColumnName("Person4_id")
                        .HasColumnType("int");

                    b.Property<int?>("Person5Id")
                        .HasColumnName("Person5_id")
                        .HasColumnType("int");

                    b.Property<string>("ReportLink")
                        .HasColumnName("Report_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("Status")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Persion3Id");

                    b.HasIndex("Person1Id");

                    b.HasIndex("Person2Id");

                    b.HasIndex("Person4Id");

                    b.HasIndex("Person5Id");

                    b.ToTable("Incident","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Inventory","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Buy1Id")
                        .HasColumnName("buy1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Buy2Id")
                        .HasColumnName("buy2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Buy3Id")
                        .HasColumnName("buy3_id")
                        .HasColumnType("int");

                    b.Property<float?>("CurrentStock")
                        .HasColumnName("Current_Stock")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<decimal?>("ExpectedCost")
                        .HasColumnName("Expected_Cost")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("InventoryId")
                        .HasColumnName("Inventory_id")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnName("Item_id")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnName("Order_Id")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnName("Person_Id")
                        .HasColumnType("int");

                    b.Property<float?>("ReorderThreshold")
                        .HasColumnName("Reorder_Threshold")
                        .HasColumnType("real");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<int?>("Units")
                        .HasColumnType("int");

                    b.Property<double?>("UnitsPerDay")
                        .HasColumnName("Units_per_day")
                        .HasColumnType("float");

                    b.Property<int?>("Zone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Buy1Id");

                    b.HasIndex("Buy2Id");

                    b.HasIndex("Buy3Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PersonId");

                    b.ToTable("InventoryItem","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MfgId")
                        .HasColumnName("Mfg_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nchar(80)")
                        .IsFixedLength(true)
                        .HasMaxLength(80);

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<string>("Upc")
                        .HasColumnName("UPC")
                        .HasColumnType("nchar(12)")
                        .IsFixedLength(true)
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("MfgId");

                    b.ToTable("Item","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("ContractLink")
                        .IsRequired()
                        .HasColumnName("Contract_Link")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Manufacturer","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Medical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnName("Event_id")
                        .HasColumnType("int");

                    b.Property<string>("FormLink")
                        .IsRequired()
                        .HasColumnName("Form_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("Medical","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Operations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessId")
                        .HasColumnName("Business_id")
                        .HasColumnType("int");

                    b.Property<int?>("ChurchId")
                        .HasColumnName("Church_id")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("RecordLink")
                        .IsRequired()
                        .HasColumnName("Record_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ChurchId");

                    b.HasIndex("PersonId");

                    b.ToTable("Operations","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ChurchId")
                        .HasColumnName("Church_id")
                        .HasColumnType("int");

                    b.Property<string>("ContactPref")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("EMail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Pg1PersonId")
                        .HasColumnName("PG1_Person_id")
                        .HasColumnType("int");

                    b.Property<int?>("Pg2PersonId")
                        .HasColumnName("PG2_Person_id")
                        .HasColumnType("int");

                    b.Property<long?>("Roles")
                        .HasColumnType("bigint");

                    b.Property<long>("SkillSets")
                        .HasColumnType("bigint");

                    b.Property<string>("Ssnum")
                        .HasColumnName("SSNum")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<long?>("Status")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChurchId");

                    b.HasIndex("Pg1PersonId");

                    b.HasIndex("Pg2PersonId");

                    b.ToTable("Person","ronripp_CStat");

                    b.HasComment("Person");
                });

            modelBuilder.Entity("CStat.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnName("Event_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Pay")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PayTerms")
                        .HasColumnName("Pay_Terms")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibilityLink")
                        .HasColumnName("Responsibility_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("Roles")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("Start_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Position","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentGrade")
                        .HasColumnName("Current_Grade")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnName("Event_id")
                        .HasColumnType("int");

                    b.Property<string>("FormLink")
                        .IsRequired()
                        .HasColumnName("Form_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("TShirtSize")
                        .HasColumnName("T_Shirt_Size")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("Registration","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualDoneDate")
                        .HasColumnName("Actual_Done_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("Blocking1Id")
                        .HasColumnName("Blocking1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Blocking2Id")
                        .HasColumnName("Blocking2_id")
                        .HasColumnType("int");

                    b.Property<int?>("ChurchId")
                        .HasColumnName("Church_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("CommittedCost")
                        .HasColumnName("Committed_Cost")
                        .HasColumnType("money");

                    b.Property<double?>("CommittedManHours")
                        .HasColumnName("Committed_Man_Hours")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("Creation_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnName("Due_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("EstimatedDoneDate")
                        .HasColumnName("Estimated_Done_Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedManHours")
                        .HasColumnName("Estimated_Man_Hours")
                        .HasColumnType("float");

                    b.Property<int?>("EventId")
                        .HasColumnName("Event_id")
                        .HasColumnType("int");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnName("ParentTask_id")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnName("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("PlanLink")
                        .HasColumnName("Plan_Link")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("int");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasColumnName("Required_Skills")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("Roles")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("Start_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnName("Total_Cost")
                        .HasColumnType("money");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("Worker1Id")
                        .HasColumnName("Worker1_id")
                        .HasColumnType("int");

                    b.Property<int?>("Worker2Id")
                        .HasColumnName("Worker2_id")
                        .HasColumnType("int");

                    b.Property<int?>("Worker3Id")
                        .HasColumnName("Worker3_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Blocking1Id");

                    b.HasIndex("Blocking2Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("EventId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("PersonId");

                    b.HasIndex("Worker1Id");

                    b.HasIndex("Worker2Id");

                    b.HasIndex("Worker3Id");

                    b.ToTable("Task","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("BusinessId")
                        .HasColumnName("Business_id")
                        .HasColumnType("int");

                    b.Property<int?>("CcaAccountId")
                        .HasColumnName("CCA_Account_id")
                        .HasColumnType("int");

                    b.Property<int?>("CcaPersonId")
                        .HasColumnName("CCA_Person_id")
                        .HasColumnType("int");

                    b.Property<int?>("ChurchId")
                        .HasColumnName("Church_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("ExpenseType")
                        .HasColumnName("Expense_Type")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeType")
                        .HasColumnName("Income_Type")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("nvarchar(700)")
                        .HasMaxLength(700);

                    b.Property<string>("Memo")
                        .HasColumnName("memo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentNumber")
                        .HasColumnName("payment_number")
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<int?>("PaymentType")
                        .HasColumnName("payment_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CcaAccountId");

                    b.HasIndex("CcaPersonId");

                    b.HasIndex("ChurchId");

                    b.ToTable("Transaction","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.TransactionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnName("Transaction_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransactionItems","ronripp_CStat");
                });

            modelBuilder.Entity("CStat.Models.Account", b =>
                {
                    b.HasOne("CStat.Models.Business", "Business")
                        .WithMany("Account")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_Account_Business")
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("CStat.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("CStat.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("CStat.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("CStat.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CStat.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("CStat.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.Attendance", b =>
                {
                    b.HasOne("CStat.Models.Event", "Event")
                        .WithMany("Attendance")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Attendance_Event");

                    b.HasOne("CStat.Models.Medical", "Medical")
                        .WithMany("Attendance")
                        .HasForeignKey("MedicalId")
                        .HasConstraintName("FK_Attendance_Medical");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("Attendance")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Attendance_Person")
                        .IsRequired();

                    b.HasOne("CStat.Models.Registration", "Registration")
                        .WithMany("Attendance")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Attendance_Registration");

                    b.HasOne("CStat.Models.Transaction", "Transaction")
                        .WithMany("Attendance")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Attendance_Transaction");
                });

            modelBuilder.Entity("CStat.Models.Business", b =>
                {
                    b.HasOne("CStat.Models.Address", "Address")
                        .WithMany("Business")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Business_Address");

                    b.HasOne("CStat.Models.Person", "Poc")
                        .WithMany("Business")
                        .HasForeignKey("PocId")
                        .HasConstraintName("FK_Business_Person");
                });

            modelBuilder.Entity("CStat.Models.Church", b =>
                {
                    b.HasOne("CStat.Models.Address", "Address")
                        .WithMany("Church")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Church_Address");

                    b.HasOne("CStat.Models.Person", "Alternate1")
                        .WithMany("ChurchAlternate1")
                        .HasForeignKey("Alternate1Id")
                        .HasConstraintName("FK_Church_Person5");

                    b.HasOne("CStat.Models.Person", "Alternate2")
                        .WithMany("ChurchAlternate2")
                        .HasForeignKey("Alternate2Id")
                        .HasConstraintName("FK_Church_Person6");

                    b.HasOne("CStat.Models.Person", "Alternate3")
                        .WithMany("ChurchAlternate3")
                        .HasForeignKey("Alternate3Id")
                        .HasConstraintName("FK_Church_Person7");

                    b.HasOne("CStat.Models.Person", "Elder1")
                        .WithMany("ChurchElder1")
                        .HasForeignKey("Elder1Id")
                        .HasConstraintName("FK_Church_Person8");

                    b.HasOne("CStat.Models.Person", "Elder2")
                        .WithMany("ChurchElder2")
                        .HasForeignKey("Elder2Id")
                        .HasConstraintName("FK_Church_Person9");

                    b.HasOne("CStat.Models.Person", "Elder3")
                        .WithMany("ChurchElder3")
                        .HasForeignKey("Elder3Id")
                        .HasConstraintName("FK_Church_Person10");

                    b.HasOne("CStat.Models.Person", "Elder4")
                        .WithMany("ChurchElder4")
                        .HasForeignKey("Elder4Id")
                        .HasConstraintName("FK_Church_Person11");

                    b.HasOne("CStat.Models.Person", "Elder5")
                        .WithMany("ChurchElder5")
                        .HasForeignKey("Elder5Id")
                        .HasConstraintName("FK_Church_Person12");

                    b.HasOne("CStat.Models.Person", "SeniorMinister")
                        .WithMany("ChurchSeniorMinister")
                        .HasForeignKey("SeniorMinisterId")
                        .HasConstraintName("FK_Church_Person");

                    b.HasOne("CStat.Models.Person", "Trustee1")
                        .WithMany("ChurchTrustee1")
                        .HasForeignKey("Trustee1Id")
                        .HasConstraintName("FK_Church_Person2");

                    b.HasOne("CStat.Models.Person", "Trustee2")
                        .WithMany("ChurchTrustee2")
                        .HasForeignKey("Trustee2Id")
                        .HasConstraintName("FK_Church_Person3");

                    b.HasOne("CStat.Models.Person", "Trustee3")
                        .WithMany("ChurchTrustee3")
                        .HasForeignKey("Trustee3Id")
                        .HasConstraintName("FK_Church_Person4");

                    b.HasOne("CStat.Models.Person", "YouthMinister")
                        .WithMany("ChurchYouthMinister")
                        .HasForeignKey("YouthMinisterId")
                        .HasConstraintName("FK_Church_Person1");
                });

            modelBuilder.Entity("CStat.Models.Event", b =>
                {
                    b.HasOne("CStat.Models.Church", "Church")
                        .WithMany("Event")
                        .HasForeignKey("ChurchId")
                        .HasConstraintName("FK_Event_Church");
                });

            modelBuilder.Entity("CStat.Models.Incident", b =>
                {
                    b.HasOne("CStat.Models.Person", "Persion3")
                        .WithMany("IncidentPersion3")
                        .HasForeignKey("Persion3Id")
                        .HasConstraintName("FK_Incident_Person2");

                    b.HasOne("CStat.Models.Person", "Person1")
                        .WithMany("IncidentPerson1")
                        .HasForeignKey("Person1Id")
                        .HasConstraintName("FK_Incident_Person");

                    b.HasOne("CStat.Models.Person", "Person2")
                        .WithMany("IncidentPerson2")
                        .HasForeignKey("Person2Id")
                        .HasConstraintName("FK_Incident_Person1");

                    b.HasOne("CStat.Models.Person", "Person4")
                        .WithMany("IncidentPerson4")
                        .HasForeignKey("Person4Id")
                        .HasConstraintName("FK_Incident_Person3");

                    b.HasOne("CStat.Models.Person", "Person5")
                        .WithMany("IncidentPerson5")
                        .HasForeignKey("Person5Id")
                        .HasConstraintName("FK_Incident_Person4");
                });

            modelBuilder.Entity("CStat.Models.InventoryItem", b =>
                {
                    b.HasOne("CStat.Models.Transaction", "Buy1")
                        .WithMany("InventoryItemBuy1")
                        .HasForeignKey("Buy1Id")
                        .HasConstraintName("FK_InventoryItem_Transaction1");

                    b.HasOne("CStat.Models.Transaction", "Buy2")
                        .WithMany("InventoryItemBuy2")
                        .HasForeignKey("Buy2Id")
                        .HasConstraintName("FK_InventoryItem_Transaction2");

                    b.HasOne("CStat.Models.Transaction", "Buy3")
                        .WithMany("InventoryItemBuy3")
                        .HasForeignKey("Buy3Id")
                        .HasConstraintName("FK_InventoryItem_Transaction3");

                    b.HasOne("CStat.Models.Inventory", "Inventory")
                        .WithMany("InventoryItem")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_InventoryItem_Inventory")
                        .IsRequired();

                    b.HasOne("CStat.Models.Item", "Item")
                        .WithMany("InventoryItem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_InventoryItem_Item")
                        .IsRequired();

                    b.HasOne("CStat.Models.Transaction", "Order")
                        .WithMany("InventoryItemOrder")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_InventoryItem_Transaction");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("InventoryItem")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_InventoryItem_Person");
                });

            modelBuilder.Entity("CStat.Models.Item", b =>
                {
                    b.HasOne("CStat.Models.Business", "Mfg")
                        .WithMany("Item")
                        .HasForeignKey("MfgId")
                        .HasConstraintName("FK_Item_Business");

                    b.HasOne("CStat.Models.Manufacturer", "MfgNavigation")
                        .WithMany("Item")
                        .HasForeignKey("MfgId")
                        .HasConstraintName("FK_Item_Manufacturer");
                });

            modelBuilder.Entity("CStat.Models.Medical", b =>
                {
                    b.HasOne("CStat.Models.Event", "Event")
                        .WithMany("Medical")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Medical_Event");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("Medical")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Medical_Person")
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.Operations", b =>
                {
                    b.HasOne("CStat.Models.Business", "Business")
                        .WithMany("Operations")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_Operations_Business");

                    b.HasOne("CStat.Models.Church", "Church")
                        .WithMany("Operations")
                        .HasForeignKey("ChurchId")
                        .HasConstraintName("FK_Operations_Church");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("Operations")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Operations_Person");
                });

            modelBuilder.Entity("CStat.Models.Person", b =>
                {
                    b.HasOne("CStat.Models.Address", "Address")
                        .WithMany("Person")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Person_Address");

                    b.HasOne("CStat.Models.Church", "Church")
                        .WithMany("Person")
                        .HasForeignKey("ChurchId")
                        .HasConstraintName("FK_Person_Church");

                    b.HasOne("CStat.Models.Person", "Pg1Person")
                        .WithMany("InversePg1Person")
                        .HasForeignKey("Pg1PersonId")
                        .HasConstraintName("FK_Person_Person1");

                    b.HasOne("CStat.Models.Person", "Pg2Person")
                        .WithMany("InversePg2Person")
                        .HasForeignKey("Pg2PersonId")
                        .HasConstraintName("FK_Person_Person2");
                });

            modelBuilder.Entity("CStat.Models.Position", b =>
                {
                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("Position")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Position_Person")
                        .IsRequired();
                });

            modelBuilder.Entity("CStat.Models.Registration", b =>
                {
                    b.HasOne("CStat.Models.Event", "Event")
                        .WithMany("Registration")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Registration_Event");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("Registration")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Registration_Person");
                });

            modelBuilder.Entity("CStat.Models.Task", b =>
                {
                    b.HasOne("CStat.Models.Task", "Blocking1")
                        .WithMany("InverseBlocking1")
                        .HasForeignKey("Blocking1Id")
                        .HasConstraintName("FK_Task_Task1");

                    b.HasOne("CStat.Models.Task", "Blocking2")
                        .WithMany("InverseBlocking2")
                        .HasForeignKey("Blocking2Id")
                        .HasConstraintName("FK_Task_Task");

                    b.HasOne("CStat.Models.Church", "Church")
                        .WithMany("Task")
                        .HasForeignKey("ChurchId")
                        .HasConstraintName("FK_Task_Church");

                    b.HasOne("CStat.Models.Event", "Event")
                        .WithMany("Task")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Task_Event")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CStat.Models.Task", "ParentTask")
                        .WithMany("InverseParentTask")
                        .HasForeignKey("ParentTaskId")
                        .HasConstraintName("FK_Task_Task2");

                    b.HasOne("CStat.Models.Person", "Person")
                        .WithMany("TaskPerson")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Task_Person");

                    b.HasOne("CStat.Models.Person", "Worker1")
                        .WithMany("TaskWorker1")
                        .HasForeignKey("Worker1Id")
                        .HasConstraintName("FK_Task_Person1");

                    b.HasOne("CStat.Models.Person", "Worker2")
                        .WithMany("TaskWorker2")
                        .HasForeignKey("Worker2Id")
                        .HasConstraintName("FK_Task_Person2");

                    b.HasOne("CStat.Models.Person", "Worker3")
                        .WithMany("TaskWorker3")
                        .HasForeignKey("Worker3Id")
                        .HasConstraintName("FK_Task_Person3");
                });

            modelBuilder.Entity("CStat.Models.Transaction", b =>
                {
                    b.HasOne("CStat.Models.Business", "Business")
                        .WithMany("Transaction")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_Transaction_Business");

                    b.HasOne("CStat.Models.Account", "CcaAccount")
                        .WithMany("Transaction")
                        .HasForeignKey("CcaAccountId")
                        .HasConstraintName("FK_Transaction_Account");

                    b.HasOne("CStat.Models.Person", "CcaPerson")
                        .WithMany("Transaction")
                        .HasForeignKey("CcaPersonId")
                        .HasConstraintName("FK_Transaction_Person");

                    b.HasOne("CStat.Models.Church", "Church")
                        .WithMany("Transaction")
                        .HasForeignKey("ChurchId")
                        .HasConstraintName("FK_Transaction_Church");
                });

            modelBuilder.Entity("CStat.Models.TransactionItems", b =>
                {
                    b.HasOne("CStat.Models.Item", "IdNavigation")
                        .WithOne("TransactionItems")
                        .HasForeignKey("CStat.Models.TransactionItems", "Id")
                        .HasConstraintName("FK_TransactionItems_Item")
                        .IsRequired();

                    b.HasOne("CStat.Models.Transaction", "Id1")
                        .WithOne("TransactionItems")
                        .HasForeignKey("CStat.Models.TransactionItems", "Id")
                        .HasConstraintName("FK_TransactionItems_Transaction")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
