@page
@model CStat.IndexInvModel

@{
    ViewData["Title"] = "Inventory";
}

    <head>
        @using System.Web;
        @using CStat.Models;

        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/gh/bgaze/bootstrap4-dialogs@1/dist/bootstrap4-dialogs.min.js"></script>

        <style>
            a {
                cursor: pointer;
            }

            .table th {
                padding: 0.1rem;
                color: lightgray;
            }

            .table td {
                padding: 0.5rem;
            }

            /*tr:nth-child(even) {background-color: #FFFFD0;}*/

            .InStockBtn {
                background-color: #E0FFE0; /* Green */
                border-radius: 8px;
                border: solid;
                border-color: black;
                border-width: 1px;
                color: black;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                cursor: pointer;
            }

            .OpenNeedBtn {
                background-color: #FF0000; /* Red */
                border-radius: 8px;
                border: solid;
                border-color: Black;
                border-width: 2px;
                color: white;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                cursor: pointer;
            }

            .TakenNeedBtn {
                background-color: #FFFF00; /* Yellow */
                border-radius: 8px;
                border: solid;
                border-color: black;
                border-width: 2px;
                color: black;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                cursor: pointer;
            }

            .StockBtn {
                background-color: #E0FFE0; /* Green */
                border-radius: 8px;
                border: solid;
                border-color: Black;
                border-width: 2px;
                color: gray;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                cursor: pointer;
            }

            td > a {
                text-decoration: none;
                color: black;
            }

            .InvInput {
                width: 2.5em;
                border: solid;
                border-color: Red;
                border-width: 4px;
            }

            .InvBtn {
            }

            .AbortInvBtn {
                border-color: Red;
                color: #E00000;
                font-weight: bold;
                background-color: #FFE0E0; /* Pink */
            }

            .NormInput {
                width: 2.5em;
            }

            MenuTable {
                table-layout: fixed;
                width: 100%;
            }

            MenuTD {
                min-width: 50%;
                width: 50%;
            }

            .container {
                display: flex;
            }

            .container.space-around {
                justify-content: space-around;
            }

            .container.space-between {
                justify-content: space-between;
            }

            #emailBtn {
                background-image: url('/images/emailBtn.jpg');
                background-repeat: no-repeat;
                background-size: 100%;
                width: 51px;
                height: 30px;
            }

        </style>

        <script type="text/javascript">

            var cur_StockInvItemId = -1;
            var STOCKED_STATE = "0";
            var STOCKED_ISTATE = 0;
            var NEEDED_STATE = "1";
            var NEEDED_ISTATE = 1;
            var ASSIGNED_STATE = "2";
            var ASSIGNED_ISTATE = 2;
            var INV_STATE = "3";
            var INV_ISTATE = 3;
            var True = true;
            var False = false;

            function onFocus(invItemId) {
                cur_StockInvItemId = invItemId;
            }

            window.addEventListener("pageshow", function (event) {
                var historyTraversal = event.persisted ||
                    (typeof window.performance != "undefined" &&
                        window.performance.navigation.type === 2);
                if (historyTraversal) {
                    // Make sure to refresh top status page when returning to this page
                    window.location.reload(true);
                }
            });

        @{
            var LoginPid = -1;
            var LoginDisplayName = "";
            Person p = Model.GetPersonFromEMail(User.Identity.Name);
            if (p != null)
            {
                LoginPid = p.Id;
                LoginDisplayName = p.FirstName.Substring(0, Math.Min(p.FirstName.Length, 5)) + p.LastName.Substring(0, Math.Min(p.LastName.Length, 1));
            }
        }
        var loginPid = @LoginPid;

            function updateInvButton(newState) {
                $("body").css("cursor", "default");
                let oldState = ($("#InvSt").text().startsWith("Start")) ? STOCKED_ISTATE : INV_ISTATE;
                if (newState !== oldState) {
                    window.location.reload(true);
                }
            }

            function itemStateChange(invItemId, fromStock) {
                let stockBtn = document.querySelector("#" + "iid" + invItemId);
                let stateBtn = document.querySelector("#" + "sid" + invItemId);
                let state = stateBtn.getAttribute("state");
                if (fromStock) {
                    if (stockBtn.getAttribute("type") == "text") {
                        cur_StockInvItemId = invItemId;
                        if (state !== INV_STATE) {
                            return;
                        }
                    }
                    cur_StockInvItemId = -1;
                }

                let pid;
                if (fromStock) {
                    state = STOCKED_STATE;
                    pid = -1;
                }
                else {
                    state = stateBtn.getAttribute("state");
                    pid = stateBtn.getAttribute("pid");
                    switch (state) {
                        case STOCKED_STATE:
                        case INV_STATE:
                            state = NEEDED_STATE;
                            break;
                        case NEEDED_STATE:
                            state = ASSIGNED_STATE;
                            pid = loginPid;
                            break;
                        case ASSIGNED_STATE:
                            if (pid == loginPid) {
                                state = NEEDED_STATE;
                                pid = -1;
                            }
                            break;
                        default:
                            state = NEEDED_STATE;
                            break;
                    }
                }

                $("body").css("cursor", "progress");
                var parameters = "{'invItemId':'" + invItemId + "','pid':'" + pid + "','state':'" + state + "'}";
                $.ajax({
                    url: "/Inventory?handler=ItemStateChange",
                    contentType: "application/json",
                    dataType: "json",
                    data: parameters,
                    success: function (response) {
                        if (response.indexOf("ERROR~:") === -1) {
                            var curState = $.parseJSON(response);
                            updateInvButton(curState.allState);
                            stateBtn.setAttribute("state", curState.invItemState.state);
                            stateBtn.setAttribute("pid", curState.invItemState.pid);
                            stateBtn.className = curState.invItemState.btnClass;
                            stateBtn.innerHTML = curState.invItemState.displayName;
                            stockBtn.className = (curState.invItemState.state !== INV_ISTATE) ? "NormInput" : "InvInput";

                            if (fromStock) {
                                stockBtn.setAttribute("type", "text");
                                if (stockBtn.value == "In?") {
                                    stockBtn.value = "";
                                }
                                // ensure value is selected after becoming text again
                                stockBtn.blur();
                                stockBtn.focus();
                                stockBtn.select();
                                stockBtn.onchange = function () { updateStock(invItemId); }
                                stockBtn.onclick = function () { this.select(); itemStateChange(invItemId, true); }
                                stockBtn.onFocus = function () { onFocus(invItemId); }
                                cur_StockInvItemId = invItemId;
                            } else {
                                if (curState.invItemState.state == ASSIGNED_ISTATE) {
                                    stockBtn.setAttribute("type", "button");
                                    stockBtn.className = "StockBtn" + " " + "NormInput";
                                    if (stockBtn.value == "") {
                                        stockBtn.value = "In?";
                                    }
                                    stockBtn.onclick = function () { this.select(); itemStateChange(invItemId, true); };
                                    stockBtn.onFocus = function () { };
                                }
                            }
                        } else {
                            $("body").css("cursor", "default");
                        }
                    },
                    fail: function (response) {
                        $("body").css("cursor", "default");
                    }
                });
            }

            function updateStock(invItemId) {
                if (invItemId === -1) {
                    return;
                }
                let stockBtn = document.querySelector("#" + "iid" + invItemId);

                var stock;
                if (stockBtn.value.length == 0) {
                    stock = 0;
                }
                else {
                    stock = parseFloat(stockBtn.value);
                    if (Number.isNaN(stock) || (stock == 0)) {
                        stockBtn.value = "";
                        stock = 0;
                    }
                }

                $("body").css("cursor", "progress");
                var parameters = "{'invItemId':'" + invItemId + "','stock':'" + stock + "'}";
                $.ajax({
                    url: "/Inventory?handler=ItemStockChange",
                    contentType: "application/json",
                    dataType: "json",
                    data: parameters,
                    success: function (response) {
                        if (response.indexOf("ERROR~:") !== -1) {
                            $("body").css("cursor", "default");
                            alert("Stock not updated.");
                        }
                        else {
                            var curState = $.parseJSON(response);
                            updateInvButton(curState.allState);
                            stockBtn.className = (curState.invItemState.state !== INV_ISTATE) ? "NormInput" : "InvInput";
                            if (cur_StockInvItemId == invItemId) {
                                cur_StockInvItemId = -1;
                            }
                        }
                    },
                    fail: function (response) {
                        $("body").css("cursor", "default");
                    }
                });
            }

            function setInvMode(bSet) {

                $("body").css("cursor", "progress");
                var parameters = "{'set':'" + bSet + "'}";
                $.ajax({
                    url: "/Inventory?handler=SetInvMode",
                    contentType: "application/json",
                    dataType: "json",
                    data: parameters,
                    success: function (response) {
                        if (response.indexOf("ERROR~:") !== -1) {
                            $("body").css("cursor", "default");
                            alert("Inv Mode not changed.");
                        }
                        else {
                            var curState = $.parseJSON(response);
                            updateInvButton(curState.allState);
                        }
                    },
                    fail: function (response) {
                        $("body").css("cursor", "default");
                    }
                });
            }

            function emailInv() {

                var parameters = "{'user':" + "'@User.Identity.Name'" + "}";
                $.ajax({
                    url: "/Inventory?handler=EMailInv",
                    contentType: "application/json",
                    dataType: "json",
                    data: parameters,
                    success: function (response) {
                        if (response.indexOf("ERROR~:") !== -1) {
                            alert("Failed to E-Mail Inventory");
                        }
                        else {
                            alert(response);
                        }
                    },
                    fail: function (response) {
                        $("body").css("cursor", "default");
                    }
                });
            }

            function encodeQuotes(str) {
                return str.replace(/\"/g, "^^").replace(/\'/g, "^");
            }
            function decodeQuotes(str) {
                return str.replace(/^^/g, "\"").replace(/^/g, "'");
            }

            function invBeforeUnload() {
                updateStock(cur_StockInvItemId);
            }

        $(document).ready(function(){
            $("[data-toggle=popover]").popover();

            $(document).on('click', '.popover', function (e) {
                var offset = $(this).offset();
                var lastChild = this.lastChild;
                var fullX = lastChild.offsetWidth;
                var fullY = lastChild.offsetHeight;
                var relX = (e.pageX - offset.left);
                var relY = ((e.pageY - offset.top) - lastChild.offsetTop);
                var xrat = relX / fullX;
                var yrat = relY / fullY;
                if ((xrat < 0) || (yrat < 0) || (xrat > 1) || (yrat > 1)) {
                    return;
                }
                var row = (yrat > 0.4833) ? 1 : 0;
                let outer = lastChild.outerHTML;
                let offStart = outer.indexOf("id=\"pid");
                let offEnd = outer.indexOf("\" src=");
                let invItemId = "";
                if ((offStart != -1) && (offEnd != -1)) {
                    invItemId = outer.substring(offStart + 7, offEnd);
                    let stockBtn = document.querySelector("#" + "iid" + invItemId);
                    if (xrat < 0.1847) {
                        stockBtn.value = (row === 0) ? 0 : 1.2;
                    } else if (xrat < 0.3378) {
                        stockBtn.value = (row === 0) ? 0.2 : 1.4;
                    } else if (xrat < 0.4955) {
                        stockBtn.value = (row === 0) ? 0.4 : 1.6;
                    } else if (xrat < 0.6486) {
                        stockBtn.value = (row === 0) ? 0.6 : 1.8;
                    } else if (xrat < 0.8018) {
                        stockBtn.value = (row === 0) ? 0.8 : 2;
                    } else  {
                        stockBtn.value = (row === 0) ? 1 : 3;
                    }
                    updateStock(invItemId);
                }
                $(this).popover('hide');
            });
            $(document).on('blur','.popover', function(){
               $(this).popover('hide');
            });
        });

        </script>
    </head>
    <body onbeforeunload="invBeforeUnload()">
        <div class="container space-between">
            <div><a href="Inventory\Create"> <b>+</b> Add New Item</a></div>
            @{ 
                bool InInv = Model.GetAllState() == IndexInvModel.INV_STATE;
            }
            <div><button id="InvSt" class="@(InInv? "AbortInvBtn":"InvBtn")" onClick="setInvMode(@(!InInv))">@(InInv ? "Abort INV" : "Start INV")</button></div>
            <div><button id="emailBtn" onClick="emailInv()"></button></div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Cur</th>
                    <th>Units</th>
                    <th>Item</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{ int LastZone = -1, CurZone, ZoneCnt = 0;
                    string[] bkRowColors = { "#FFD0D0", "#FFF2CE", "#FFFFC8", "#D8FFD0", "#D0F8FF", "#D0D8FF", "#F0D0FF" };
                }
                @foreach (var item in Model.InventoryItems.OrderByDescending(i => (i.State.HasValue ? i.State%3 : 0)).ThenBy(i2 => (i2.Zone.HasValue && (i2.Zone.Value > 0)) ? i2.Zone.Value : 999))
                {
                    <tr>
                        @{
                            CurZone = (item.Zone.HasValue && (item.Zone.Value > 0)) ? item.Zone.Value : 1025;
                            if (CurZone != LastZone)
                            {
                                LastZone = CurZone;
                                ZoneCnt = 1;
                            }
                            else
                            {
                                ++ZoneCnt;
                            }
                            var bcol = ((ZoneCnt % 2) != 0) ? bkRowColors[(CurZone - 1) % bkRowColors.Length] : "#FFFFFF";

                            string fid = "fid" + item.ItemId;
                            string iid = "iid" + item.ItemId;
                            string sid = "sid" + item.ItemId;
                            string pid = "pid" + item.ItemId;
                            string inputType;
                            string onClickFunc;
                            string onChangeFunc;
                            string onFocusFunc;
                            string inputClass;
                            string curStock = (item.CurrentStock.HasValue && (item.CurrentStock.Value > 0)) ? item.CurrentStock.Value.ToString() : "";
                            if (item.State == IndexInvModel.ASSIGNED_STATE)
                            {
                                inputType = "button";
                                inputClass = "StockBtn";
                                if (curStock.Length == 0)
                                    curStock = "In?";
                                onClickFunc = "{this.select(); itemStateChange(" + item.ItemId + ", true);}";
                                onChangeFunc = "";
                                onFocusFunc = "";
                            }
                            else
                            {
                                inputType = "text";
                                onClickFunc = "";
                                inputClass = (item.State == IndexInvModel.INV_STATE) ? "InvInput" : "NormInput";
                                onClickFunc = "{this.select(); itemStateChange(" + item.ItemId + ", true);}";
                                onChangeFunc = "updateStock(" + item.ItemId + ")";
                                onFocusFunc = "onFocus(" + item.ItemId + ")";
                            }
                        }
                        <td style="background-color:@bcol">
                            @{
                                CreateItemsModel.ItemUnits units = (CreateItemsModel.ItemUnits)item.Units;
                                var unitsStr = units.ToString();
                            }
                            <form id="@fid">
                                <input invItemId="@item.ItemId" type="@inputType" id="@iid" class="@inputClass" onclick="@onClickFunc" onchange="@onChangeFunc" onfocus="@onFocusFunc" value="@curStock" />
                            </form>
                        </td>
                        <td style="background-color:@bcol">
                            @if ((units == CreateItemsModel.ItemUnits.drums) || (units == CreateItemsModel.ItemUnits.boxes))
                            {
                                <div style="position: relative">
                                    <a data-toggle="popover" title="Pick Current amount :" data-html="true" data-content="<img id='@pid' src='/images/itemCnt.jpg' height='120'>"> @unitsStr</a>
                                </div>
                            }
                            else
                            {
                                @unitsStr
                            }
                        </td>
                        <td style="background-color:@bcol">
                            <a href="Inventory\Edit?id=@item.Id">@Html.DisplayFor(modelItem => item.Item.Name)</a>
                        </td>
                        <td style="background-color:@bcol">

                            @{
                                IndexInvModel.InvItemState invIS = Model.GetInvItemState(item);
                            }
                            <button class="@invIS.btnClass" id="@sid" onClick="itemStateChange('@item.ItemId', false)" pid="@invIS.pid" state="@invIS.state" invItemId="@item.ItemId">@invIS.displayName</button>
                            @*<a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>*@

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </body>
