@page
@model CStat.Pages.Tasks.CreateModel
@Html.AntiForgeryToken()

@{
    ViewData["Title"] = (Model.IsTemplate ? "Template " : "Task ") + ((Model.task.Id <= 0) ? "(New)" : Model.task.Id.ToString());
}

    <head>
        @using System;
        @using System.Web;
        @using System.Globalization;
        @using CStat.Models;

        <style>
            #taskDetail {
                overflow-y: scroll;
                height: 400px;
                font-family: "Verdana";
                min-width: 90%;
                resize: none; /* Remove this if you want the user to resize the textarea */
            }

            .table th {
                padding: 0.1rem;
                color: lightgray;
            }

            .table td {
                padding: 0.5rem;
            }

            .ljust {
                text-align: left;
            }

            .cjust {
                text-align: center;
            }

            .rjust {
                text-align: right;
            }

            .mhider {
                display: none;
                text-align: right;
            }

            .mhidec {
                display: none;
                text-align: center;
            }

            .mhidel {
                display: none;
                text-align: right;
            }

            .redit {
                text-align: right;
                max-width: 4em;
            }

            .cedit {
                text-align: left;
                max-width: 4em;
            }

            .ledit {
                text-align: left;
                width: 100%;
            }

            .hdrBk {
                background-color: #FFF090;
            }

            .tborder {
                padding: 4px 4px 4px 4px;
                border: 2px solid #ffd800;
                background-color: #fef4b9
            }

            .tcborder {
                padding: 4px 4px 4px 4px;
                border: 2px solid #008000;
                background-color: #D0FFD0;
                margin-top: 10px;
            }

            .tccborder {
                padding: 4px 4px 4px 4px;
                border: 2px solid #ffd800;
                background-color: #ffff80;
            }

            #SaveAll {
                background-color: #007272;
                border: 2px solid #0000FF;
                color: white;
                margin-bottom: 6px;
            }

            #markDone {
                background-color: #C0FFC0;
                color: black;
                font-weight: bold;
                margin-left: 8px;
            }

            #bomTable tbody tr:nth-child(even) {
                background-color: #fff185;
            }

            #bomTable th {
                background-color: lightgray;
            }
        </style>

        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>

        <script type="text/javascript">

        function encodeQuotes(str) {
            return str.replace(/\"/g, "^^").replace(/\'/g, "^");
        }

        function unEncodeQuotes(str) {
            //return str.replace(/^^/g, "\"").replace(/^/g, "\'");
            while (str.indexOf("^^") != -1) {
                str = str.replace("^^", "\"");
            }
            while (str.indexOf("^") != -1) {
                str = str.replace("^", "\'");
            }
            return str;
        }

        var pics = [@Html.Raw(String.Join(",", Model.taskData.pics.Select(p => "'" + p.url + "'")))];
        var picTitles = [@Html.Raw(String.Join(",", Model.taskData.pics.Select(p => "'" + CCommon.EncodeQuotes(p.title) + "'")))];

        var curPic = 0;
        var lastPic = -1;
        var inMarkDone = false;
        var dirtyTask = false;
        var inModCost = false;

        function markTaskDirty(e) {
            setDirtyTask();
        }

        function setDirtyTask() {
            if (!dirtyTask) {
                dirtyTask = true;
                $("#saveDiv").show();
            }
        }

        function clearDirtyTask() {
            if (dirtyTask) {
                dirtyTask = false;
                $("#saveDiv").hide();
            }
        }

        function initialView() {
            if ($("#task_Description").val().trim() === "") {
                $("#task_Description").focus();
            }
        }

        function saveTask() {

            var saveFormData = new FormData();
            // Add Task fields
            saveFormData.append("pctComp", $("#pctComp").val());
            saveFormData.append("taskState", $("#taskData_state").val());
            saveFormData.append("taskReason", $("#taskData_reason").val());
            saveFormData.append("taskPriority", $("#task_Priority").val());
            saveFormData.append("taskPersonId", $("#task_PersonId").val());
            saveFormData.append("taskDueDate", $("#task_DueDate").val());
            saveFormData.append("taskCommittedCost", !!$("#Funded").val() ? $("#Funded").val() : "");
            saveFormData.append("taskTotalCost", !!$("#TCostStat").html() ? $("#TCostStat").html() : "");
            saveFormData.append("taskTitle", encodeQuotes($("#task_Description").val()));
            saveFormData.append("taskId", $("#task_Id").val());
            saveFormData.append("taskType", $("#task_Type").val());
            let docVal = encodeQuotes($("#TaskDoc").text());
            if (docVal === "<Browse to Add Doc>") {
                docVal = "";
            }
            saveFormData.append("taskDoc", docVal); // Add Doc
            saveFormData.append("taskDetail", encodeQuotes($("#taskDetail").val())); // Add Description
            saveFormData.append("fixedDueDate", $("#FixedDueDate").is(":checked"));
            saveFormData.append("taskComments", encodeQuotes($("#AllComments").val()));

            if (($("#task_Type").val() & 0x00020000) != 0) {
                saveFormData.append("taskCreateDue", $("#taskData_CreateTaskDue").val());
                saveFormData.append("taskCreateDueVal", $("#CreateTaskDueVal").val());
                saveFormData.append("taskCreateEach", $("#taskData_CreateTaskEach").val());
            }
            if (($("#task_ActualDoneDate").val() === "") && (inMarkDone || ($("#taskData_state").val() === 0x00001000))) {
                $("#task_ActualDoneDate").val(Date.now().toString());
            }
            saveFormData.append("taskDoneDate", $("#task_ActualDoneDate").val());

            // Get Photos and titles
            let pics_s = JSON.stringify(pics);
            let picTitles_s = JSON.stringify(picTitles.map(t => encodeQuotes(t)));

            // Get BOM
            let bom_a = saveBOM();
            let bom_s = JSON.stringify(bom_a);

            saveFormData.append("pics", pics_s);
            saveFormData.append("picTitles", picTitles_s);
            saveFormData.append("bom", bom_s);

            jQuery.ajax({
                url: "/Tasks/Create?handler=Save",
                headers: {
                    RequestVerificationToken:
                        $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                type: "POST",
                data: saveFormData,
                async: true,
                processData: false,
                contentType: false,
                success: function (res) {
                    if (res.indexOf("Success") === 0) {
                        clearDirtyTask();
                        $("#SaveAll").text("Success!");
                        $("#SaveAll").css("background-color", "#00C000");
                        setTimeout(function () {
                            $("#SaveAll").text("Save Task");
                            $("#SaveAll").css("background-color", "#007272");
                        }, 1000);
                        if (inMarkDone) {
                            $("#markDone").prop("disabled", true).css('opacity', 0.5);
                        }
                    }
                    else {
                        alert("Image Save Failed : " + res);
                    }
                },
                error: function (res) {
                    alert("Image Save Failed : " + res);
                },
                complete: function (res) {
                    $("#newPicId").hide();
                    $("#picHdrId").show();
                    inMarkDone = false;
                }
            });
        }

        function saveBOM() {
            var bom = [];

            $('#bomTable > tbody  > tr').each(function () {

                var id = -1;
                var desc = "";
                var ucost = "";
                var units = "";
                var qty = "";
                var tcost = "";

                $(this).find('td').each(function () {

                    let idStr = $(this).attr("id");

                    if (idStr.indexOf("mdd") === 0) {
                        desc = encodeQuotes($(this).html().trim());
                        if (desc.indexOf("&lt;add new") === -1) {
                            id = parseInt(idStr.substr(3), 10);
                        }
                    }

                    if (idStr.indexOf("mdu") === 0) {
                        ucost = $(this).html().trim();
                    }

                    if (idStr.indexOf("mds") === 0) {
                        units = $(this).html().trim();
                    }

                    if (idStr.indexOf("mdq") === 0) {
                        qty = $(this).html().trim();
                    }

                    if (idStr.indexOf("mdt") === 0) {
                        tcost = $(this).html().trim();
                    }
                });

                if (id !== -1) {
                    var line = new Object(); //matches C# BOMLine
                    line["id"] = id;
                    line["desc"] = desc;
                    line["ucost"] = ucost;
                    line["units"] = units;
                    line["qty"] = qty;
                    line["tcost"] = tcost;
                    bom.push(line);
                }
            });

            return bom;
        }

        function updateBOM() {
            var grandTot = 0;
            var foundAdd = false;
            var maxLine = 0;
            $('#bomTable > tbody  > tr').each(function () {
                $(this).find('td').each(function () {
                    let idStr = $(this).attr("id");

                    if (idStr.indexOf("mdt") === 0) {
                        let totStr = $(this).html().trim();
                        if (totStr.length > 0) {
                            if (totStr.indexOf("$") === 0) {
                                grandTot += parseFloat(totStr.substr(1));
                            } else {
                                grandTot += parseFloat(totStr);
                            }
                        }
                    } else {
                        if (idStr.indexOf("mdd") === 0) {
                            let line = parseInt(idStr.substr(3), 10);
                            if (line > maxLine) {
                                maxLine = line;
                            }
                            let descStr = $(this).html().trim();
                            if (descStr.indexOf("&lt;add new") != -1) {
                                foundAdd = true;
                            }
                        }
                    }
                });
            });

            if (!foundAdd) {
                var newLine = maxLine + 1;
                $('#bomTable > tbody:last').append('<tr><td id="mdd' + newLine + '">&#60;add new description&#62;</td>' +
                    '<td id="med' + newLine + '" class="mhidel"><input id="mid' + newLine + '" type="text" class="ledit"></td>' +
                    '<td id="mdu' + newLine + '" class="rjust"></td>' +
                    '<td id="meu' + newLine + '" class="mhider"><input id="miu' + newLine + '" type="text" class="redit"></td>' +
                    '<td id="mds' + newLine + '" class="cjust"></td>' +
                    '<td id="mes' + newLine + '" class="mhidec"><input id="mis' + newLine + '" type="text" class="cedit"></td>' +
                    '<td id="mdq' + newLine + '" class="rjust"></td>' +
                    '<td id="meq' + newLine + '" class="mhider"><input id="miq' + newLine + '" type="text" class="redit" style="max-width:2em;"></td>' +
                    '<td id="mdt' + newLine + '" class="rjust"></td>' +
                    '<td id="met' + newLine + '" class="mhider"><input id="mit' + newLine + '" type="text" class="redit"></td>' + '</tr>');
            }

            $("#gtId").html("Grand Total: $" + grandTot.toFixed(2));
            $("#TCostStat").html(grandTot.toFixed(2));
        }

        $(document).ready(function () {

            function setPicture() {
                if (pics.length > 0) {
                    $("#imgDiv").html('<image src="' + pics[curPic] + '" style="width:100%">');
                    $("#imgTitle").html("<b>" + unEncodeQuotes(picTitles[curPic]) + "</b>");
                    lastPic = curPic;
                } else {
                    $("#imgDiv").html('[No Pictures]');
                    $("#imgTitle").html("<b>Tap [+] to Add a Picture</b>");
                }
                $("#imgNextBtn").prop("disabled", curPic >= (pics.length - 1));
                $("#imgPriorBtn").prop("disabled", curPic <= 0);
            }

            setPicture();
            $("#saveDiv").hide();
            if ($("#taskDetail").val().trim() === "") {
                $("#taskDetail").val("<add Detail here>");
            }

            function updateDueVal() {

                if ($("#taskData_CreateTaskDue").is(":visible")) {
                    let ctDue = $("#taskData_CreateTaskDue").val();
                    if ((ctDue == (0x00000007 << 26)) ||  // At_Hour        
                        (ctDue == (0x00000008 << 26)) ||  // Before_Hour    
                        (ctDue == (0x00000009 << 26)) ||  // On_Day         
                        (ctDue == (0x0000000A << 26)) ||  // Before_Day     
                        (ctDue == (0x0000000B << 26)) ||  // On_Week_Day    
                        (ctDue == (0x0000000C << 26)) ||  // Before_Week_Day
                        (ctDue == (0x0000000D << 26)) ||  // On_Week        
                        (ctDue == (0x0000000E << 26)) ||  // Before_Week    
                        (ctDue == (0x0000000F << 26)) ||  // In_Month       
                        (ctDue == (0x00000010 << 26)) ||  // Before_Month   
                        (ctDue == (0x00000011 << 26))) {  // At_Date  
                        $("#CreateTaskDueVal").val("");
                        $("#CreateTaskDueVal").show();
                    } else {
                        $("#CreateTaskDueVal").hide();
                    }
                }
            }

            updateDueVal();

            if (window.location.href.indexOf("TaskDoc=1") != -1) {
                $("#TaskDoc").text(sessionStorage.getItem("TaskDocFolder") + " > " + sessionStorage.getItem("TaskDocFile"));
                sessionStorage.setItem("TaskDocFolder", "");
                sessionStorage.setItem("TaskDocFile", "");
                sessionStorage.setItem("TaskDocReturn", "");
                $("#statusTab").removeClass('active');
                $("#descTab").addClass('active');
                setDirtyTask();
            }

            function openFileShare() {
                var docVal = $("#TaskDoc").text();
                if (!docVal || docVal === "<Browse to Add Doc>") {
                    return;
                }
                var dvp = docVal.split(" > ");
                if (!dvp || dvp.length !== 2) {
                    return;
                }

                var parameters = "{'Folder':'" + dvp[0].trim() + "','File':'" + dvp[1].trim() + "'}";
                $.ajax({
                    url: "/Docs?handler=FileShare",
                    contentType: "application/json",
                    dataType: "json",
                    data: parameters,
                    success: function (response) {
                        if (response.indexOf("ERROR~:") === -1) {
                            if (response.indexOf("http") == 0) {
                                window.location.href = response;
                            }
                            else {
                                window.location.href = "../" + response;
                            }
                        }
                    },
                });
            }

            $("#TaskDoc").click(function () {
                if (dirtyTask) {
                    saveTask();
                }
                openFileShare();
            });

            $("#OpenDoc").click(function () {
                if (dirtyTask) {
                    saveTask();
                }
                openFileShare();
            });

            $("#taskDetail").click(function () {
                if ($("#taskDetail").val().trim() === "<add Detail here>") {
                    $("#taskDetail").val("");
                }
            });

            $("#imgTitle").on('blur', "#editImgTitle", function () {
                picTitles[curPic] = encodeQuotes($("#editImgTitle").val().trim());
                ("#imgTitle").html("<b>" + unEncodeQuotes(picTitles[curPic]) + "</b>");
            });

            $("#imgTitle").click(function () {
                if ($("#imgTitle").html().indexOf("<b>") === 0) {
                    $("#imgTitle").html("<input type='text' id='editImgTitle' onchange='setDirtyTask()'>");
                    $("#editImgTitle").val(unEncodeQuotes(picTitles[curPic]));
                    $("#editImgTitle").focus();
                }
            });

            $("#imgNextBtn").click(function () {
                if (curPic < (pics.length - 1)) {
                    ++curPic;
                    setPicture();
                }
            });

            $("#imgPriorBtn").click(function () {
                if (curPic > 0) {
                    --curPic;
                    setPicture();
                }
            });

            $("#markDone").click(function () {
                inMarkDone = true;
                $("#taskData_state").val(0x00001000);
                $("#taskData_reason").val(0x02000000);
                $("#pctComp").val(100);
                $("#pctComp").trigger("change");
                saveTask();
            });

            $("#taskData_CreateTaskDue").change(function () {
                updateDueVal();
            });

            $("#taskData_state").change(function () {
                let pctCompChanged = false;
                if ($("#taskData_state").val() == 0x00001000) {
                    $("#pctComp").val(100);
                    pctCompChanged = true;
                }
                else {
                    if ($("#pctComp").val() >= 100) {
                        $("#pctComp").val(90);
                        pctCompChanged = true;
                    }
                    $("#task_ActualDoneDate").val("");
                }
                if (pctCompChanged) {
                    $("#pctComp").trigger("change");
                }
            });

           //*******************************************************************************************
           //d mdd bl.desc     u mdu bl.ucost     s mds bl.units     q mdq bl.qty        t mdt bl.tcost
           //  med bl.desc       meu bl.ucost       mes bl.units       meq bl.qty          met bl.tcost
           //********************************************************************************************/

            $('body').on('keydown', "[id^=me]", function (e) {
                setDirtyTask();
                if ((e.which == 9) || (e.which == 13)) {
                    e.preventDefault();
                    let eid = "#" + event.target.id;
                    let field = eid.substr(3, 1);
                    let line = eid.substr(4);
                    let did = "#md" + field + line;
                    let iid = "#mi" + field + line;
                    let fld;
                    let ln;
                    switch (field) {
                        case "d":
                            fld = "u";
                            ln = line;
                            break;
                        case "u":
                            fld = "s";
                            ln = line;
                            break;
                        case "s":
                            fld = "q";
                            ln = line;
                            break;
                        case "q":
                            fld = "t";
                            ln = line;
                            break;
                        case "t":
                            fld = "d";
                            ln = parseInt(line,10)+1;
                            break;
                    }

                    let ndid = "#md" + fld + ln;
                    $(ndid).hide();
                    let neid = "#me" + fld + ln;
                    let niid = "#mi" + fld + ln;
                    $(neid).show();
                    $(niid).attr("value", $(ndid).text());
                    $(niid).select();
                }
            });

            $(document).on('click', "[id^=md]", function () {
                setDirtyTask();
                let did = "#" + event.target.id;
                let field = did.substr(3, 1);
                let line = did.substr(4);
                let eid = "#me" + field + line;
                let iid = "#mi" + field + line;

                console.log("CLICK Line=" + line + " Field=" + field);

                $(did).hide();
                $(eid).show();
                $(iid).attr("value", $(did).text());
                $(iid).select();
            });

            $(document).on('blur', "[id^=mi]", function () {
                let iid = "#" + event.target.id;
                let field = iid.substr(3, 1);
                let line = iid.substr(4);

                if (field === 'u') {
                    let qt = parseFloat($("#" + "mdq" + line).text());
                    let ucost = parseFloat(event.target.value);
                    if (!isNaN(ucost)) {
                        event.target.value = ucost.toFixed(2);
                    }
                    if (!isNaN(ucost) && (ucost > 0) && !isNaN(qt) && (qt > 0)) {
                        let mit = "#" + "mit" + line;
                        let mdt = "#" + "mdt" + line;
                        if ($(mit).is(":visible")) {
                            $(mit).val((ucost * qt).toFixed(2));
                        } else {
                            $(mdt).text((ucost * qt).toFixed(2));
                        }
                    }
                } else if (field === 'q') {
                    let ucost = parseFloat($("#" + "mdu" + line).text());
                    let qt = parseFloat(event.target.value);
                    if (!isNaN(ucost) && (ucost > 0) && !isNaN(qt) && (qt > 0)) {
                        let mit = "#" + "mit" + line;
                        let mdt = "#" + "mdt" + line;
                        if ($(mit).is(":visible")) {
                            $(mit).val((ucost * qt).toFixed(2));
                        } else {
                            $(mdt).text((ucost * qt).toFixed(2));
                        }
                    }
                }

                let did = "#md" + field + line;
                let eid = "#me" + field + line;

                $(eid).hide();
                $(did).show();
                $(did).text($(iid).val());
                updateBOM();
            });

            $(document).on("DOMSubtreeModified", "[id^=md]", function () {

                if (inModCost) {
                    return;
                }
                inModCost = true;
                let id = "#" + event.target.id;
                let field = id.substr(3, 1);
                let line = id.substr(4);

                if (field === 'u') {
                    let ucost = parseFloat($("#" + "mdu" + line).text());
                    if (isNaN(ucost)) {
                        $(id).text("");
                        inModCost = false;
                        return;
                    }
                    let qt = parseFloat($("#" + "mdq" + line).text());
                    if ((ucost > 0) && !isNaN(qt) && (qt > 0)) {
                        $("#" + "mdu" + line).text(ucost.toFixed(2));
                        $("#" + "mdt" + line).text((ucost * qt).toFixed(2));
                    }
                } else if (field === 'q') {
                    let qt = parseFloat($("#" + "mdq" + line).text());
                    if (isNaN(qt)) {
                        $(id).text("");
                        inModCost = false;
                        return;
                    }
                    let ucost = parseFloat($("#" + "mdu" + line).text());
                    if (!isNaN(ucost) && (ucost > 0) && (qt > 0)) {
                        $("#" + "mdt" + line).text((ucost * qt).toFixed(2));
                    }
                } else if (field === 't') {
                    let tcost = parseFloat($("#" + "mdt" + line).text());
                    if (isNaN(tcost)) {
                        $(id).text("");
                        inModCost = false;
                        return;
                    }
                    if (!isNaN(tcost) && (tcost > 0)) {
                        $("#" + "mdt" + line).text(tcost.toFixed(2));
                    }
                }
                updateBOM();
                inModCost = false;
            });

            var formdata = null;
            var fileInput = null;
            $("#newPicBtn").click(function () {
                $("#picHdrId").hide();
                $("#savePicBtn").hide();
                $("#newPicId").show();

                fileInput = document.getElementById("newImg");
                fileInput.value = "";
                $("#newImgDesc").val("");

                if (window.FormData) {
                    formdata = new FormData();
                }

                fileInput.addEventListener("change", function (evt) {
                    $("#savePicBtn").show();
                });
            });

            $("#cancelPicBtn").click(function () {
                $("#newPicId").hide();
                $("#picHdrId").show();
            });

            $("#pctComp").change(function () {
                let comp = $("#pctComp").val();
                let compVal = parseInt(comp);
                if (!!compVal) {
                    if (compVal < 100) {
                        $("#markDone").prop("disabled", false).css('opacity', 1.0);
                        if ($("#taskData_state").val() === 0x00001000) {
                            $("#taskData_state").val(0x00000400);
                        }
                        $("#taskData_reason").val(0x04000000);
                    } else {
                        $("#taskData_state").val(0x00001000);
                        $("#taskData_reason").val(0x02000000);
                        $("#markDone").prop("disabled", true).css('opacity', 0.5);
                    }
                } else {
                    return;
                }
                var pbarComp = $("#pbarComp");
                pbarComp.attr("aria-valuenow", comp);
                pbarComp.css("width", comp + "%");
                $("#srComp").text(comp + "% Complete");
            });

            $("#Funded").change(function () {
                updateFunded();
            });

            $("body").on('DOMSubtreeModified', "#TCostStat", function () {
                updateFunded();
            });

            function updateFunded() {
                let tcostStr = $("#TCostStat").html();
                let tcost = (!!tcostStr) ? parseFloat(tcostStr) : 0;

                let fundedStr = $("#Funded").val();
                let funded = !!fundedStr ? parseFloat(fundedStr) : 0;
                let pct = (tcost === 0) ? 100 : Math.round((funded / tcost) * 100);
                var pbarCost = $("#pbarCost");
                pbarCost.attr("aria-valuenow", pct);
                pbarCost.css("width", pct + "%");
                $("#srCost").text(pct + "% Funded");
            }

            function initCosts() {
                updateBOM();
            }

            initCosts();
            initialView();

            $("#savePicBtn").click(function () {
                var i = 0, len = fileInput.files.length, img, reader, file;

                for (; i < len; i++) {
                    file = fileInput.files[i];

                    if (!!file.type.match(/image.*/)) {
                        if (window.FileReader) {
                            reader = new FileReader();
                            reader.onloadend = function (e) {
                                //showUploadedItem(e.target.result, file.fileName);
                            };
                            reader.readAsDataURL(file);
                        }

                        if (formdata) {
                            let picDesc = $("#newImgDesc").val();
                            if (!picDesc) {
                                if (!confirm("Empty picture description. Add?")) {
                                    return;
                                }
                                picDesc = "";
                            }
                            picDesc = encodeQuotes(picDesc);

                            let tid = $("#newImgDesc").attr("tid");
                            if (!tid) {
                                tid = "-1"; // error condition
                            }
                            formdata.append("image", file);
                            formdata.append("picTitle", picDesc);
                            formdata.append("taskId", tid);
                            formdata.append("picId", pics.length + 1);

                            jQuery.ajax({
                                url: "/Tasks/Create?handler=SendPic",
                                headers: {
                                    RequestVerificationToken:
                                        $('input:hidden[name="__RequestVerificationToken"]').val()
                                },
                                type: "POST",
                                data: formdata,
                                async: true,
                                processData: false,
                                contentType: false,
                                success: function (res) {
                                    if (res.indexOf("Success:") === 0) {
                                        pics.push(res.substr(8));
                                        picTitles.push(picDesc);
                                        setDirtyTask();
                                        setPicture();
                                    } else {
                                        alert("Image Save Failed : " + res);
                                    }
                                },
                                error: function (res) {
                                    alert("Image Save Failed : " + res);
                                },
                                complete: function (res) {
                                    $("#newPicId").hide();
                                    $("#picHdrId").show();
                                }
                            });
                        }
                    }
                    else {
                        alert('Not a valid image!');
                    }
                }
            });

            $("#delPicBtn").click(function () {
                if ((pics.length > 0) && confirm("Delete " + picTitles[curPic] + " ?")) {
                    pics.splice(curPic, 1);
                    picTitles.splice(curPic, 1);
                    if (curPic > (pics.length - 1)) {
                        curPic = Math.max(curPic - 1, 0);
                    }
                    setDirtyTask();
                    setPicture();
                }
            });

            $("#FixedDueDate").click(function () {
                if ($("#FixedDueDate").is(":checked")) {
                    $("#DueDateLabel").text("Due Date:");
                } else {
                    $("#DueDateLabel").text("Est. Done:");
                }
             });

            $("#NewComment").focus(function () {
                if (this.value === "<add a comment here>") {
                    this.select();
                }
            });


            $("#AddComment").click(function () {
                let newCom = $("#NewComment").val();
                if (!!newCom && newCom !== "<add a comment here>") {
@{
                    var dtLoc = DateTime.Now;
                    TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
                    DateTime dt = TimeZoneInfo.ConvertTime(dtLoc, easternZone);
                    var AtIdx = User.Identity.Name.IndexOf("@");
                    if (AtIdx == -1) AtIdx = 6;
                    var user = User.Identity.Name.Substring(0, AtIdx);
                    var curDT = "===[ " + user + " " + dt.DayOfWeek.ToString().Substring(0, 3) + " " + dt.Month + "/" + dt.Day + "/" + dt.Year % 100 + " @ " + dt.ToString("h:mm") + " " + ((dt.Hour >= 12) ? "PM" : "AM") + " ]===";
}
                    let allComs = $("#AllComments").val();
                    allComs = "@curDT" + "\n" + newCom + "\n" + allComs;
                    $("#AllComments").val(allComs);
                    $("#NewComment").val("<add a comment here>");
                }
            });

            $("input").change(function () {
                setDirtyTask();
            });
            $("select").change(function () {
                setDirtyTask();
            });
            $("textarea").change(function () {
                setDirtyTask();
            });

            // Enable navigation prompt if task dirty
            window.onbeforeunload = function () {

                let focusEl = document.activeElement;
                let textFocus = !!focusEl && (focusEl.type === "text") || (focusEl.type === "textarea");

                if (dirtyTask || textFocus) {
                    return "Task NOT Saved";
                } else {
                    return;
                }
            };
        });

        function getDoc() {
            saveTask();
            sessionStorage.setItem("TaskDocReturn", window.location.href + "&TaskDoc=1");
            window.location.href = "/Docs?select=1";
        }

        </script>

    </head>


@{
    var bkColor = Model.IsTemplate ? "#FFC0C0" : "#FFFFFF";
    var saveStr = Model.IsTemplate ? "Save Template" : "Save Task";
 }

<body style="background-color:@bkColor">

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="task.Id" />
    <input type="hidden" asp-for="task.Type" />
    <input type="hidden" asp-for="task.ActualDoneDate" />
    <div class="row" style="background-color:@bkColor">
        <div class="col-md-10">
            <div class="form-group">
                <label asp-for="task.Description" class="control-label">Title:</label>
                <input asp-for="task.Description" class="form-control" style="font-weight:bold" />
                <span asp-validation-for="task.Description" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-2" id="saveDiv">
            <button id="SaveAll" onclick="saveTask()">@saveStr</button>
        </div>
    </div>

    <div style="background-color:@bkColor">
        <ul class="nav nav-tabs">
            <li class="active">
                <a href="#statusTab" data-toggle="tab"><b>Status</b></a>
            </li>
            <li role="presentation">
                <a href="#descTab" data-toggle="tab"><b>Detail</b></a>
            </li>
            <li role="presentation">
                <a href="#picTab" data-toggle="tab"><b>Pictures</b></a>
            </li>
            <li role="presentation">
                <a href="#bomTab" data-toggle="tab"><b>Costs</b></a>
            </li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="statusTab">

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group tborder" style="margin-top: 10px">
                            <input type="text" id="pctComp" style="max-width: 2.2em; text-align: center; font-weight: bold" value="@Model.taskData.PercentComplete" /><b> % Complete</b><button id="markDone">Mark Done</button>
                            <div class="progress" style="max-height:2.4em; max-width:16em; margin-top:4px; border: 2px solid black;">
                                <div id="pbarComp" class="progress-bar" role="progressbar" aria-valuenow="@Model.taskData.PercentComplete" aria-valuemin="0" aria-valuemax="100" style="width:@Model.taskData.PercentComplete%">
                                    <div id="srComp" class="sr-only">@Model.taskData.PercentComplete% Complete</div>
                                </div>
                            </div>
                            <div>
                                <label asp-for="taskData.state" class="control-label">State:</label>
                                <select asp-for="taskData.state" asp-items="ViewBag.State" style="max-width:10em; margin-right:8px"></select>
                                <label asp-for="taskData.reason" class="control-label">Reason:</label>
                                <select asp-for="taskData.reason" asp-items="ViewBag.Reason" style="max-width:10em; margin-right:8px"></select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="tborder" style="margin-top:10px">
                            <label asp-for="task.PersonId" class="control-label">Assigned to:</label>
                            <select asp-for="task.PersonId" asp-items="ViewBag.PersonId" style="max-width:10em; margin-right:8px; margin-bottom:6px"></select>
                            @{
                                var checkedStr = (Model.taskData.FixedDueDate) ? "checked" : "";
                                var dueDateLabel = (Model.taskData.FixedDueDate) ? "Due Date:" : "Est. Done:";
                            }
                        <div>
                            <label id="DueDateLabel" asp-for="task.DueDate" class="control-label" style="margin-right:1.3em">@dueDateLabel</label>
                            @{if((!Model.task.DueDate.HasValue || Model.task.DueDate.Value.Year == 1900))
                              {
                                 <input asp-for="task.DueDate" type="date" value="" style="max-height:1.4em; max-width:9.7em;" />
                              }
                              else
                              {
                                 <input asp-for="task.DueDate" type="date" style="max-height:1.4em; max-width:9.7em;" />
                              }
                            }

                        </div>
                            <div>
                                <input type="checkbox" id="FixedDueDate" name="FixedDue" @checkedStr>
                                <label id="FixedDueLabel" for="FixedDue">Fixed Date?</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="tborder" style="margin-top:10px">
                            <label asp-for="task.Priority" class="control-label">Priority:</label>
                            <select asp-for="task.Priority" asp-items="ViewBag.Priority" style="max-height: 2.4em; max-width: 8.2em"></select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group tcborder">
                            <label asp-for="task.CommittedCost" class="control-label">Funded&nbsp;&nbsp;&nbsp;&nbsp;$</label>
                            <input type="text" id="Funded" style="max-width:5em; text-align:left; font-weight:bold;" value="@Model.task.CommittedCost.Value.ToString("F", CultureInfo.CurrentCulture)" />
                            <div class="progress" style="max-height:2.4em; max-width:16em; margin-top:4px; border: 2px solid black;">
                                <div id="pbarCost" class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width:60%; background-color:limegreen !important;">
                                    <div id="srCost" class="sr-only">60% Funded</div>
                                </div>
                            </div>
                            <span font-weight:bold">Total Cost $</span>
                            <span id="TCostStat" style="max-width:5em; text-align:left; font-weight:bold">@Model.task.TotalCost</span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        @{
                            var NewTTaskDisplay = Model.IsTemplate ? "inline-block" : "none";
                            var ComSpanDisplay = Model.IsTemplate ? "none" : "inline";
                            var ComTADisplay = Model.IsTemplate ? "none" : "inline-block";
                        }
                        <div class="tccborder" id="NewTTask" style="display:@NewTTaskDisplay; margin-top:10px">
                            <b>Create a New Task ...</b>
                            <div>
                                <label asp-for="taskData.CreateTaskDue" class="control-label">due:</label>
                                <select asp-for="taskData.CreateTaskDue" asp-items="ViewBag.CreateTaskDue" style="display:inline;max-width:10em; margin-right:8px"></select>
                                <input type="text" id="CreateTaskDueVal" style="display:inline; max-width: 4em; max-height: 1.4em;" value="@Model.taskData.CreateTaskDueVal"/>
                            </div>
                            <div>
                                <label asp-for="taskData.CreateTaskEach" class="control-label" style="display:inline"> of each:</label>
                                <select asp-for="taskData.CreateTaskEach" asp-items="ViewBag.CreateTaskEach" style="display:inline;max-width:10em; margin-right:8px"></select>
                            </div>
                        </div>
                        <span style="display:@ComSpanDisplay">
                            <input type="text" style="width:90%" id="NewComment" value="<add a comment here>" />
                            <button id="AddComment"><b>+</b></button>
                        </span>
                        <textarea asp-for="taskData.comments" class="form-control" id="AllComments" disabled style="display:@ComTADisplay; min-height:8em; color:black; background-color:white"></textarea>
                    </div>
            </div>
            </div>
            <div class="tab-pane" id="descTab">

                <section class="row">
                    <div class="col-md-12">
                        <table style="margin-top:8px; margin-bottom:4px">
                            <tr>
                                @{
                                    var TaskDocVal = ((Model.task.PlanLink != null) && (Model.task.PlanLink.Length > 5)) ? Model.task.PlanLink : "<Browse to Add Doc>";
                                }
                                <td>Doc:</td>
                                <td id="TaskDoc" style="padding-left:3px;padding-right:3px; border-style:inset; font-weight:bold">@TaskDocVal</td>
                                <td><button id="OpenDoc" style="margin-left:6px; margin-right:6px"><b>Open Doc</b></button></td>
                                <td><button id="BrowseDoc" onclick="getDoc()" style="margin-right:6px">Browse</button></td>
                                <td></td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-12" width="100%" style="margin-top:8px">
                        <textarea asp-for="taskData.Detail" class="form-control" id="taskDetail"></textarea>
                    </div>
                </section>

            </div>
            <div class="tab-pane" id="picTab">
                <div id="picHdrId" class="col-md-12" width="100%">
                    <table width="100%" style="margin-top:4px">
                        <tr>
                            <td><button id="newPicBtn" style="margin-right:6px"><b>+</b></button></td>
                            <td><button id="imgPriorBtn">&#60;&#60;</button></td>
                            <td id="imgTitle" style="text-align:center; margin-left:4px; margin-right:4px;"></td>
                            <td><button id="imgNextBtn">&#62;&#62;</button></td>
                            <td><button id="delPicBtn" style="margin-left:6px"><b>X</b></button></td>
                        </tr>
                    </table>
                </div>

                <div id="newPicId" style="display:none; margin-top:4px; border: 3px ridge teal">
                    <div class="col-md-12">
                        <h4>Add New Picture with Title ...</h4>
                    </div>
                    <div class="col-md-3" style="margin-top:4px">
                        <input id="newImg" type="file" name="file">
                    </div>
                    <div class="col-md-6" style="margin-top:4px">
                        <span style="text-align:center; margin-left:4px; margin-right:4px;"><b><label for="newImgDesc"></label>Title: </b><input id="newImgDesc" tid="@Model.task.Id" style="min-width:20em" /></span>
                    </div>
                    <div class="col-md-3" style="margin-top:4px; margin-bottom:4px">
                        <button id="savePicBtn" style="margin-left:4px; display:none; background-color:greenyellow"><b>Save</b></button>
                        <button id="cancelPicBtn" style="margin-left:4px"><b>Cancel</b></button>
                    </div>
                </div>
                <div id="imgDiv">
                </div>
            </div>

            <div class="tab-pane" id="bomTab">

                <section class="row">
                    <div class="col-md-12" width="100%">
                        <table width="100%" style="margin-top:4px">
                            <tr>
                                <th><h4><b>Materials/Labor/Fees</b></h4></th>
                                <th>&nbsp;&nbsp;&nbsp;</th>
                                <th><button id="mopId" onclick="updateBOM()" style="margin-left:10px; max-height:2.2em">+</button></th>
                                <th>&nbsp;&nbsp;&nbsp;</th>
                                <th id="gtId" style="text-align:right;"></th>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-12" width="100%">
                        <table id="bomTable" width="100%" style="margin-top:4px">
                            <tr>
                                <th class="hdrBk">Item Description</th>
                                <th class="rjust hdrBk">UCost</th>
                                <th class="cjust hdrBk">Unit</th>
                                <th class="rjust hdrBk">Qty</th>
                                <th class="rjust hdrBk">TCost</th>
                            </tr>
                            <tbody>

                                @{
                                int i=1;
                                foreach (var bl in Model.taskData.bom)
                                {
                                    var mid = "mid" + i;
                                    var miu = "miu" + i;
                                    var mis = "mis" + i;
                                    var miq = "miq" + i;
                                    var mit = "mit" + i;

                                    <tr>
                                        <td id="mdd@{@bl.id}">@bl.desc</td>
                                        <td id="med@{@bl.id}" class="mhidel"><input id="@mid" type="text" class="ledit"></td>
                                        <td id="mdu@{@bl.id}" class="rjust">@bl.ucost</td>
                                        <td id="meu@{@bl.id}" class="mhider"><input id="@miu" type="text" class="redit"></td>
                                        <td id="mds@{@bl.id}" class="cjust">@bl.units</td>
                                        <td id="mes@{@bl.id}" class="mhidec"><input id="@mis" type="text" class="cedit"></td>
                                        <td id="mdq@{@bl.id}" class="rjust">@bl.qty</td>
                                        <td id="meq@{@bl.id}" class="mhider"><input id="@miq" type="text" class="redit" style="max-width:2em;"></td>
                                        <td id="mdt@{@bl.id}" class="rjust">@bl.tcost</td>
                                        <td id="met@{@bl.id}" class="mhider"><input id="@mit" type="text" class="redit"></td>
                                    </tr>
                                    ++i;
                                }
                                }
                            </tbody>
                        </table>
                    </div>
                </section>
            </div>
        </div>
    </div>
    <div>
        <p style="margin-top:1em;"><a asp-page="Index">Back to List</a></p>
    </div>
</body>
    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
