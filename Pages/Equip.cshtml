@page
@model CStat.Pages.EquipModel
@using Common

    @{
        ViewData["Title"] = "Equip";
        Layout = "_LayoutEquip";

    }

    <head>
        @*<meta name="viewport" content="width=device-width, initial-scale=1.0">*@
        <meta name="viewport" content="width=device-width, minimal-ui">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.3/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.3/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/gh/bgaze/bootstrap4-dialogs@1/dist/bootstrap4-dialogs.min.js"></script>
        <script type="text/javascript" src="jquery.svg.js"></script>

        <style>
            #container {
                background-color: black;
                color: greenyellow;
                padding: 0px;
            }

            .erow {
                height: 12px;
                max-height: 12px;
            }

            #container td, #container th {
                vertical-align: middle;
                padding: 3px;
            }

            .table td, .table th {
                padding: .75rem;
                vertical-align: top;
                border-top: 1px solid #0000FF;
            }

            .eqTitle {
                font-size: 1.2em;
                background-color: black;
                color: #E8FFC0;
            }

            .eqDateTime {
                white-space: pre-line;
            }

            .greenClass {
                padding-left: 3px;
                padding-right: 3px;
                font-size: 1.5em;
                background-color: black;
                color: greenyellow;
            }

            .yellowClass {
                padding-left: 3px;
                padding-right: 3px;
                font-size: 1.5em;
                background-color: yellow;
                color: black;
            }

            .redClass {
                padding-left: 3px;
                padding-right: 3px;
                font-size: 1.5em;
                background-color: red;
                color: black;
            }

            .svgtext {
                fill: cyan;
            }

        </style>

        <script>

            var eqValsArr = [];
            var eqPropsArr = [];
            var eqMinArr = [];
            var eqMaxArr = [];
            var eqColorArr = [];
            var eqCurValArr = [];
            @for (int i = 0; i < Model.ActEq.Count; ++i)
            {
                string curValStr = Model.ActEqVal(i);
                double curVal = (!curValStr.StartsWith("-") ? double.Parse(curValStr) : 0);
                string colorStr = Model.ActEq[i].GetColor(curVal, false);
                <text>
                eqCurValArr.push(@curVal);
                eqColorArr.push(@Html.Raw("\"" + colorStr + "\""));
                eqValsArr.push(@Html.Raw(Json.Serialize(Model.ActEqHistory(i))));
                eqPropsArr.push(@Html.Raw(Json.Serialize(Model.ActEq[i])));
                eqMinArr.push( ((eqValsArr[@i].length > 0) ? Math.min(...eqValsArr[@i]) : 0) );
                eqMaxArr.push(((eqValsArr[@i].length > 0) ? Math.max(...eqValsArr[@i]) : 0));
                </text>
            }

        var gRowHeight = 0;

        function setRowHeight() {

            let totW = $("#tbodyId").width();

            //let hdrDiv = document.querySelector("header");
            //let totH = Math.min(document.documentElement.clientHeight, window.innerHeight || 0);
            //let hdrH = !!hdrDiv ? hdrDiv.clientHeight : Math.round(totH / 10);
            //let h = Math.round(totH - (1.6 * hdrH));

            let hdrH = $("nav.navbar.navbar-expand-sm.navbar-toggleable-sm").outerHeight(true);
            let totH = window.innerHeight;
            //let totH = $("html").outerHeight(true);
            let h = totH - hdrH - 12;

            let gRowHeight = Math.max(80, Math.round(h / (@Model.ActEq.Count)));

            $(".erow").css("max-height", gRowHeight + "px");
            $(".erow").css("height", gRowHeight + "px");

            let w = 150;
            if (totW > 500) {
                w += Math.min(250, totW - 500);
            }

            $(".ChartSVG").each(function (index) {
                $(this).width(w);
                $(this).height(gRowHeight - 24);
                updateChart(index, $(this));
            });

            //$(".HdrSVG").each(function (index) {
            //    $(this).width(17);
            //    $(this).height(gRowHeight - 24);
            //    updateHdr(index, $(this));
            //});
        }

        function updateChart(idx, svg) {

            //<svg width="vWidth" height="vHeight" viewBox="sOrgX sOrgY sWidth sHeight">

            let cBot = eqPropsArr[idx].chartBottom;
            let cTop = eqPropsArr[idx].chartTop;
            let cH = cTop - cBot;
            let vW = svg.width();
            let vH = svg.height();

            // Determine sub rect
            let sOrgX = 0;
            let sOrgY = (eqValsArr[idx].length > 0) ? eqMinArr[idx]-0.5 : cBot;
            let sW = vW;
            let sH = (eqValsArr[idx].length > 0) ? (eqMaxArr[idx] - eqMinArr[idx])+1 : cH;
            svg.attr("viewBox", sOrgX + " " + sOrgY + " " + sW + " " + sH);
            var sBox = { xo: sOrgX, yo: sOrgY, w: sW, h: sH };

            let RTop = eqPropsArr[idx].redTop;
            let RBot = eqPropsArr[idx].redBottom;
            let GTop = eqPropsArr[idx].greenTop;
            let GBot = eqPropsArr[idx].greenBottom;

            let GH = GTop - GBot;
            let GY = GTop;

            let AY1 = 0, AH1 = 0;
            let AY2 = 0, AH2 = 0;
            let RY1 = 0, RH1 = 0;
            let RY2 = 0, RH2 = 0;

            if (RTop > GTop)
            {
                AH1 = RTop - GTop;
                AY1 = RTop;
                RH1 = cTop - RTop;
                RY1 = cTop;
            }

            if (RBot < GBot)
            {
                AH2 = GBot - RBot;
                AY2 = GBot;
                RH2 = RBot - cBot;
                RY2 = RBot;
            }

            svg.html(GetRectStr(0, AY1, vW, AH1, "fill:rgb(54,54,0);", sBox) +
                GetRectStr(0, AY2, vW, AH2, "fill:rgb(54,54,0);", sBox) +
                GetRectStr(0, RY1, vW, RH1, "fill:rgb(64,0,0);", sBox) +
                GetRectStr(0, RY2, vW, RH2, "fill:rgb(64,0,0);", sBox) +
                GetRectStr(0, GY, vW, GH, "fill:rgb(0,64,0);", sBox) +
                GetPolylineStr(idx, "fill:none;stroke:white;stroke-width:2", sBox) +
                GetTextStr(sOrgX, sOrgY, sH, sW) +
                GetLineStr(0, eqCurValArr[idx], vW, eqCurValArr[idx], "fill:none;stroke:" + eqColorArr[idx] + ";stroke-width:2", sBox));
        }

        function C2S(cx, cy, sBox) {
            return { x: cx, y: sBox.h - (cy-sBox.yo) + sBox.yo };
        }

        function GetTextStr(sOrgX, sOrgY, sH, sW) {
            let fs = (sH * .05);
            return "<text x=\"" + (sOrgX+2) + "\"  y=\"" + (sOrgY + 1.1*fs) + "\" font-size=\"" + (sH * .05) + "\" lengthAdjust=\"spacingAndGlyphs\" textlength=\"" + (sW * .1) + "\" class=\"svgtext\">I love SVG!</text>";
        }

        function GetRectStr(cx, cy, w, h, styleStr, sBox) {
            let p = C2S(cx, cy, sBox);
            let x = p.x;
            let y = p.y;
            return "<polygon points=\"" + x + "," + y + " " + (x+w) + "," + y + " " + (x+w) + "," + (y+h) + " " + x + "," + (y+h) + "\" style=\"" + styleStr + "\" />";
        }

        function GetPolylineStr(idx, styleStr, sBox) {
            let numIncs = eqValsArr[idx].length - 1;
            if (numIncs < 0)
                return "";

            let polyStr = "<polyline vector-effect=\"non-scaling-stroke\" style=\"" + styleStr + "\" points=\"";

            eqValsArr[idx].forEach((v,x) => {
                let p = C2S((sBox.w * ((numIncs-x)/ numIncs)), v, sBox);
                polyStr += ((x === 0)? "" : " ") + p.x.toFixed(3) + "," + p.y.toFixed(3);
            });

            polyStr += "\" />";
            return polyStr;
        }

        function GetLineStr(cx1, cy1, cx2, cy2, styleStr, sBox) {
            let s1 = C2S(cx1, cy1, sBox);
            let s2 = C2S(cx2, cy2, sBox);
            return "<polyline vector-effect=\"non-scaling-stroke\" style=\"" + styleStr + "\" points=\"" + s1.x.toFixed(3) + "," + s1.y.toFixed(3) + " " + s2.x.toFixed(3) + "," + s2.y.toFixed(3) + "\" />";
        }

        screen.orientation.addEventListener("change", function (e) { setRowHeight(); }, false);

        $(document).ready(function () {

            //const elem = document.documentElement;
            //if (elem.requestFullscreen) { elem.requestFullscreen() }

        });

        </script>

    </head>
    <body onload="setRowHeight()" onresize="setRowHeight()">
        <table class="table" id="container">
            <tbody id="tbodyId">
            @for (int i = 0; i < Model.ActEq.Count; ++i)
            {
                <tr class="erow">
                    <td class="eqTitle">
                        @Model.ActEq[i].Title
                    </td>
                    <td>
                        <span class="@Model.GetColorClass(Model.ActEq[i].PropName)"><b>@Model.ActEqVal(i)</b></span> @Model.ActEqUnits(i)
                    </td>
                    <td>
                            @if (Model.ActEq[i].IsPropane())@Html.Raw("<a href=\"EquipRpt\">")
                            <svg class="ChartSVG" style="padding-top:10px; padding-bottom:10px;" overflow="visible" preserveAspectRatio="none">
                            </svg>
                            @if (Model.ActEq[i].IsPropane())@Html.Raw("</a>")
                    </td>
                    <td class="eqDateTime">
                        @Model.ActEqDT(i)
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </body>